generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserEntity {
  id                                String     @id @default(uuid())
  loginId                           String     @unique
  password                          String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("User")
}

enum Sex {
  MALE
  FEMALE
}

model PatientEntity {
  id           String      @id @default(uuid())
  name         String
  birthDate    String
  sex          Sex
  serialNumber String
  diagnoses    DiagnosisEntity[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("Patient")
}

enum MachineLearningStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model DiagnosisEntity {
  id String @id @default(uuid())

  patient   PatientEntity @relation(fields: [patientId], references: [id])
  patientId String
  cause     Cause

  mainImage   InputFileEntity?  @relation("main_image")
  images InputFileEntity[]      @relation("etc_images")

  bedsoreRecord BedsoreRecordEntity?

  machineLearningStatus MachineLearningStatus @default(NOT_STARTED)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("Diagnosis")
}

model BedsoreRecordEntity {
  id             String        @id @default(uuid())
  recordedAt     DateTime?
  level          BedsoreLevel?
  levelEtcDetail String?

  predictionAccuracy Int?
  region             Region?
  width              Int?
  length             Int?
  depth              Int?
  status             BedsoreRecordStatus?
  statusEtcDetail    String?

  diagnosis   DiagnosisEntity? @relation(fields: [diagnosisId], references: [id])
  diagnosisId String?    @unique

  // 드레싱 결정 항목
  isInfected      Boolean?
  surroundingSkin SurroundingSkin?
  amountOfExudate AmountOfExudate?
  basalTissue     BasalTissue?

  customRecord String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("BedsoreRecord")
}

enum BedsoreRecordStatus {
  UNDERMINING
  SINUS_TRACK
  ETC
}

enum BasalTissue {
  HEALED
  EPITHELIALIZATION
  GRANULATION_TISSUE
  PARALYSIS_TISSUE
  NECROTIC_TISSUE
}

enum SurroundingSkin {
  NORMAL_SKIN
  MARCERATION
  ERYTHEMA
  HARDENING
  ETC
}

enum AmountOfExudate {
  NONE
  LITTLE
  NORMAL_SKIN
  MANY
}

enum Region {
  SACRUM
  HEEL
  ISCHIAL_TUBEROSITY
  SHIN_BONE
  KNEECAP
}

enum BedsoreLevel {
  PREVENTION
  ONE
  TWO
  THREE
  FOUR
  DEEP_TISSUE_DAMAGE
  UNCLASSIFIED
  DEVICE_BEDSORE
  CURED
  ETC
}

enum Cause {
  MUCOUS_MEMBRANE
  MEDICAL_DEVICE
  OTHER
}

// TODO: change to InputInputFileEntity
model InputFileEntity {
  id           String @id @default(uuid())
  name         String
  originalName String
  path         String
  size         String

  diagnosisForMainImage   DiagnosisEntity? @relation("main_image", fields: [diagnosisIdForMainImage], references: [id])
  diagnosisIdForMainImage String? @unique

  diagnosisForETCImage   DiagnosisEntity? @relation("etc_images", fields: [diagnosisIdForETCImage], references: [id])
  diagnosisIdForETCImage String?
  
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("InputFile")
}

model BedsoreManagementGuideEntity {
  id          String       @id @default(uuid())
  level       BedsoreLevel
  title       String?
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("BedsoreManagementGuide")
}
